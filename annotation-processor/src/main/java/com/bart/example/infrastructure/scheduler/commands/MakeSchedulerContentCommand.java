package com.bart.example.infrastructure.scheduler.commands;

import com.bart.example.infrastructure.scheduler.model.SchedulerClass;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.NoArgsConstructor;

@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class MakeSchedulerContentCommand {
    @Getter
    private final static MakeSchedulerContentCommand instance = new MakeSchedulerContentCommand();

    public String execute(SchedulerClass schedulerClass) {
        StringBuilder content = new StringBuilder();
        String targetClassName = schedulerClass.classElement().getSimpleName().toString();

        // Generate package
        content.append("package ").append(schedulerClass.packageName()).append(";\n\n");

        // Generate imports
        content.append("import java.util.concurrent.*;\n");
        content.append("import java.util.*;\n");
        content.append("import javax.annotation.PostConstruct;\n");
        content.append("import javax.annotation.PreDestroy;\n");
        content.append("import org.slf4j.*;\n\n");

        // Generate class
        content.append("/**\n");
        content.append(" * Auto-generated scheduler for ").append(targetClassName).append("\n");
        content.append(" * Generated by SchedulerProcessor\n");
        content.append(" */\n");
        content.append("public class ").append(schedulerClass.className()).append(" {\n\n");

        // Generate logger
        content.append("    private static final Logger logger = LoggerFactory.getLogger(\"").append(schedulerClass.className()).append("\");\n\n");

        // Generate executor service
        content.append("    private final ScheduledExecutorService scheduler;\n");
        content.append("    private final ").append(targetClassName).append(" target;\n");
        content.append("    private final List<ScheduledFuture<?>> scheduledTasks = new ArrayList<>();\n\n");

        // Generate constructor
        content.append("    public ").append(schedulerClass.className()).append("() {\n");
        content.append("        this.scheduler = Executors.newScheduledThreadPool(").append(schedulerClass.scheduledMethods().size()).append(");\n");
        content.append("        this.target = new ").append(targetClassName).append("();\n");
        content.append("    }\n\n");

        content.append("    public ").append(schedulerClass.className()).append("(").append(targetClassName).append(" target, ScheduledExecutorService scheduler) {\n");
        content.append("        this.scheduler = scheduler;\n");
        content.append("        this.target = target;\n");
        content.append("    }\n\n");

        // Generate init method
        content.append("    @PostConstruct\n");
        content.append("    public void init() {\n");
        content.append("        logger.info(\"Initializing scheduler with {} tasks\", ").append(schedulerClass.scheduledMethods().size()).append(");\n");
        content.append("        try {\n");

        for (var method : schedulerClass.scheduledMethods()) {
            generateScheduledTask(content, method);
        }

        content.append("            logger.info(\"Scheduler initialized successfully\");\n");
        content.append("        } catch (Exception e) {\n");
        content.append("            logger.error(\"Failed to initialize scheduler\", e);\n");
        content.append("            shutdown();\n");
        content.append("            throw new RuntimeException(\"Scheduler initialization failed\", e);\n");
        content.append("        }\n");
        content.append("    }\n\n");

        // Generate shutdown method
        content.append("    @PreDestroy\n");
        content.append("    public void shutdown() {\n");
        content.append("        logger.info(\"Shutting down scheduler\");\n");
        content.append("        scheduledTasks.forEach(task -> task.cancel(false));\n");
        content.append("        scheduler.shutdown();\n");
        content.append("        try {\n");
        content.append("            if (!scheduler.awaitTermination(5, TimeUnit.SECONDS)) {\n");
        content.append("                logger.warn(\"Scheduler did not terminate gracefully, forcing shutdown\");\n");
        content.append("                scheduler.shutdownNow();\n");
        content.append("            }\n");
        content.append("        } catch (InterruptedException e) {\n");
        content.append("            scheduler.shutdownNow();\n");
        content.append("            Thread.currentThread().interrupt();\n");
        content.append("        }\n");
        content.append("        logger.info(\"Scheduler shutdown completed\");\n");
        content.append("    }\n\n");

        // Generate utility methods for cron expressions
        content.append("    private long calculateInitialDelay(String cronExpression) {\n");
        content.append("        // Simplified cron parser - in production use a proper cron library\n");
        content.append("        try {\n");
        content.append("            return CronUtils.calculateInitialDelay(cronExpression);\n");
        content.append("        } catch (Exception e) {\n");
        content.append("            logger.error(\"Invalid cron expression: \" + cronExpression, e);\n");
        content.append("            return 0;\n");
        content.append("        }\n");
        content.append("    }\n\n");

        content.append("    private long calculatePeriod(String cronExpression) {\n");
        content.append("        // Simplified cron parser - in production use a proper cron library\n");
        content.append("        try {\n");
        content.append("            return CronUtils.calculatePeriod(cronExpression);\n");
        content.append("        } catch (Exception e) {\n");
        content.append("            logger.error(\"Invalid cron expression: \" + cronExpression, e);\n");
        content.append("            return 60000; // Default to 1 minute\n");
        content.append("        }\n");
        content.append("    }\n");
        content.append("}\n");

        return content.toString();
    }

    private void generateScheduledTask(StringBuilder content, com.bart.example.infrastructure.scheduler.usecases.ScheduledMethodInfo method) {
        String methodName = method.methodName();
        var scheduled = method.scheduledAnnotation();

        content.append("            // Scheduling method: ").append(methodName).append("\n");

        String taskName = methodName + "Task";

        if (!scheduled.cron().isEmpty()) {
            content.append("            ScheduledFuture<?> ").append(taskName).append(" = scheduler.scheduleAtFixedRate(\n");
            content.append("                () -> {\n");
            content.append("                    try {\n");
            content.append("                        target.").append(methodName).append("();\n");
            content.append("                    } catch (Exception e) {\n");
            content.append("                        logger.error(\"Scheduled task '").append(methodName).append("' failed\", e);\n");
            content.append("                    }\n");
            content.append("                },\n");
            content.append("                calculateInitialDelay(\"").append(scheduled.cron()).append("\"),\n");
            content.append("                calculatePeriod(\"").append(scheduled.cron()).append("\"),\n");
            content.append("                TimeUnit.MILLISECONDS);\n");
            content.append("            scheduledTasks.add(").append(taskName).append(");\n");
        } else if (scheduled.fixedRate() > 0) {
            content.append("            ScheduledFuture<?> ").append(taskName).append(" = scheduler.scheduleAtFixedRate(\n");
            content.append("                () -> {\n");
            content.append("                    try {\n");
            content.append("                        target.").append(methodName).append("();\n");
            content.append("                    } catch (Exception e) {\n");
            content.append("                        logger.error(\"Scheduled task '").append(methodName).append("' failed\", e);\n");
            content.append("                    }\n");
            content.append("                },\n");
            content.append("                ").append(scheduled.initialDelay()).append(",\n");
            content.append("                ").append(scheduled.fixedRate()).append(",\n");
            content.append("                ").append(scheduled.timeUnit()).append(");\n");
            content.append("            scheduledTasks.add(").append(taskName).append(");\n");
        } else if (scheduled.fixedDelay() > 0) {
            content.append("            ScheduledFuture<?> ").append(taskName).append(" = scheduler.scheduleWithFixedDelay(\n");
            content.append("                () -> {\n");
            content.append("                    try {\n");
            content.append("                        target.").append(methodName).append("();\n");
            content.append("                    } catch (Exception e) {\n");
            content.append("                        logger.error(\"Scheduled task '").append(methodName).append("' failed\", e);\n");
            content.append("                    }\n");
            content.append("                },\n");
            content.append("                ").append(scheduled.initialDelay()).append(",\n");
            content.append("                ").append(scheduled.fixedDelay()).append(",\n");
            content.append("                ").append(scheduled.timeUnit()).append(");\n");
            content.append("            scheduledTasks.add(").append(taskName).append(");\n");
        }
        content.append("\n");
    }
}